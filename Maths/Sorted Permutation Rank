long long fact(int n)
{
    return (n <= 1)? 1 :(n * fact(n-1));
}

void populateAndIncreaseCount (int* count, string str)
{
    int i;
 
    for( i = 0; str[i]; ++i )
        ++count[ str[i] ];
 
    for( i = 1; i < 256; ++i )
        count[i] += count[i-1];
}

void updatecount (int* count, char ch)
{
    int i;
    for( i = ch; i < 256; ++i )
        --count[i];
}
 

int Solution::findRank(string str) {
    int len = str.size();
    long long mul = fact(len);
    long long  rank = 1, i;
 
    // all elements of count[] are initialized with 0
    int count[256] = {0}; 
 
    // Populate the count array such that count[i] 
    // contains count of characters which are present
    // in str and are smaller than i
    populateAndIncreaseCount( count, str );
 
    for (i = 0; i < len; ++i)
    {
        mul /= len - i;
 
        // count number of chars smaller than str[i]
        // fron str[i+1] to str[len-1]
        rank +=( count[ str[i] - 1]% 1000003 * mul% 1000003)% 1000003;
        rank%= 1000003;
        // Reduce count of characters greater than str[i]
        updatecount (count, str[i]);
    }
    return rank;
}
