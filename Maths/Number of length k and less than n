vector<int> convert(int C){
    vector<int> res;
    if(C==0){
    res.push_back(0);
    return res;
    }
    while(C!=0){
        res.push_back(C%10);
        C/=10;
    }
    reverse(res.begin(),res.end());
    return res;
}
int Solution::solve(vector<int> &A, int B, int C) {
    int d=A.size();
    vector<int> digit=convert(C);
    int dig=digit.size();
    if(dig<B||A.size()==0){
        return 0;        
    }
    else if(dig>B){
        if(A[0]==0&&B!=1){
            return (d-1)*pow(d,B-1);
        }
        else
            return pow(d,B);
    }
    else if(dig==B){
        int dp[B+1],lower[11]={0};
        dp[0]=0;
        for(int i=0;i<d;++i){
            lower[A[i]+1]=1;
        }
        for(int i=1;i<11;++i){
            lower[i]+=lower[i-1];
        }
        bool flag=true;
        
        for(int i=1;i<=B;++i){
            int curr=lower[digit[i-1]];
                dp[i]=dp[i-1]*d;
                
                if(i==1&&B!=1&&A[0]==0){
                    curr=curr-1;
                }
                
                if(flag){
                    dp[i]+=curr;
                }
                
                flag=flag&(lower[digit[i-1]+1]==lower[digit[i-1]]+1);
        }
        return dp[B];
    }
}
