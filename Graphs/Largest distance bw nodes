#define N 111111
vector<int> g[N];
pair<int,int> ans;

void dfs(int v,int root=-1,int distance=0){
    if(distance>ans.first){
        ans=make_pair(distance,v);
    }
    for(int i=0;i<g[v].size();++i){
        if(g[v][i]!=root){
            dfs(g[v][i],v,distance+1);
        }
    }
}

int Solution::solve(vector<int> &A) {
    int n=A.size();
    for(int i=0;i<n;++i){
        g[i].clear();
    }
    for(int i=0;i<n;++i){
        if(A[i]!=-1){
            g[i].push_back(A[i]);
            g[A[i]].push_back(i);
        }
    }
    int v=0;
    ans=make_pair(-1,-1);
    dfs(v);
    v=ans.second;
    ans=make_pair(-1,-1);
    dfs(v);
    return ans.first;
    
}
